/*
*
* Мини скрипт для работы с картами и зонами доставки
* predator_pc@21042016 для extremeshop.ru
*
*/

//структура устанавливаем ключи
function struct_of_array(n)
{
//сдвигаем массив на один элемент начиная с заданного индекса n
    var i=str_adr.length;
    var j=0;
    
    while(i>parseInt(n))
    {    
        j=i-1;
        if(i==str_adr.length)
            str_adr[i]=new Array();
            
        str_adr[i]['object']=str_adr[j]['object'];
        str_adr[i]['id']=str_adr[j]['id'];
        str_adr[i]['tel']=str_adr[j]['tel'];
        i=i-1;
    }
    
}

//передача элементов в массив
function set_array(indx, d)
{
    obj = yaPoints[indx];
    var i=str_adr.length;
    var j=0;
    var flag=false;
    var flag_s=false;
    if(i==0)//Создаем элемент
    {
        str_adr[i]=new Array();
        str_adr[i]['object']=obj;
        str_adr[i]['id']=d;
    }
    else 
    {
        if(d==0)//элемент с Index=0 всегда первый
        {
            if(str_adr[d]['id']!=d)
                struct_of_array(d);
                
            str_adr[d]['object']=obj;
            str_adr[d]['id']=d;
        }
        else
        {
            if(d==1)//элемент с Index=1 всегда последний
            {
                
                j=i-1;
                if(str_adr[j]['id']==d)//Элемент существует
                {
                    str_adr[j]['object']=obj;
                }
                else
                {
                    str_adr[i]=new Array();
                    str_adr[i]['object']=obj;
                    str_adr[i]['id']=d;
                }
            }
            else
            {
                for(var m = 0; m < i; m++) 
                {
                    if(str_adr[m]['id']==d)//перезаписываем данные этого элемента --по сути уже не нужен
                    {
                        str_adr[m]['object']=obj;
                        str_adr[m]['id']=d;
                        flag=true;
                        break;//выходим из цикла for
                    }
                }
                if(flag==false)//Создаем новый элемент массива и перезаписываем в него значения последней точки
                {
                    j=i-1;
                    if(str_adr[j]['id']==1)
                    {
                        if(d>=2)
                        {
                            var t=0;
                            max_id=0;
                            max_pos=0;
                            while(t<i)
                            {
                                if(str_adr[t]['id']>max_id)
                                {
                                    max_id=str_adr[t]['id'];
                                    max_pos=t;
                                }
                                t++;
                            }
                            if(d>max_id)//исправить позиции отправляемые в функцию   или нет
                            {//записываем следующим
                                if(i<3)
                                {
                                    struct_of_array(max_pos);
                                    str_adr[max_pos]['object']=obj;
                                    str_adr[max_pos]['id']=d;
                                }
                                else
                                {
                                    struct_of_array(max_pos);
                                    str_adr[max_pos+1]['object']=obj;
                                    str_adr[max_pos+1]['id']=d;
                                }
                            }
                            else if(d==max_id)
                            {//перезаписываем элемент
                                str_adr[max_pos]['object']=obj;
                                str_adr[max_pos]['id']=d;
                            }
                            else if(d<max_id)
                            {//записать до 
                                struct_of_array(max_pos);
                                str_adr[max_pos]['object']=obj;
                                str_adr[max_pos]['id']=d;
                            }
                            else
                            {
                                struct_of_array(j);
                                str_adr[j]['object']=obj;
                                str_adr[j]['id']=d;
                            }
                            
                        }
                    }
                    else
                    {
                        str_adr[i]=new Array();
                        str_adr[i]['object']=obj;
                        str_adr[i]['id']=d;
                    }
                }
            }
        }
              
        
        
        
    }         
    $('#t'+d).removeAttr('disabled');
}

//Вытащить координаты: разделитель пробел ' '
function explode( delimiter, string ) {
    var emptyArray = { 0: '' };
    if ( arguments.length != 2 || typeof arguments[0] == 'undefined' || typeof arguments[1] == 'undefined' ){       return null;    }
    if ( delimiter === '' || delimiter === false || delimiter === null ){        return false;    }
    if ( typeof delimiter == 'function' || typeof delimiter == 'object' || typeof string == 'function' || typeof string == 'object' ) {        return emptyArray;    }
    if ( delimiter === true ) {        delimiter = '1';    }
    return string.toString().split ( delimiter.toString() );
}

//Проверка установки элемента массива
function isset() {
	 var a = arguments,	 l = a.length,	 i = 0,	 undef;

	 if (l === 0) {
		 throw new Error('Empty isset');
	 }
		 while (i !== l) {
				 if (a[i] === undef || a[i] === null) {
				   return false;
		 } i++;
	 }  
	return true;
}


//Стартуем карты
ymaps.ready(init);

function init() {

//Город пользователя по умолчанию
var userCity = 'Новосибирск';
window.yaPoints = [];
var myMap, route, ch =1;
var markers = [];
var point = [];    
var str_adr=[];

//	Создадим полигон
    var myMap = new ymaps.Map("map", {
			center:	[55.03023958662654,83.01634839361031],
            zoom: 10,
  		    controls: []
        }, {
//            searchControlProvider: 'yandex#search'
        });

//	Адреса для проверки базы данных на предметт нуля
//	var myAddress = [	[10000001,'ул. Ленина','1'], [10000002,'ул. Арбузова','22'], [10000003,'Героев труда','6'], [10000004,'Лескова','15'], [10000005,'улица','1'], [10000006,'Краснообск','21'], [10000007,'Советская','64'], [10000008,'Советская','64'], [10000009,'Немировича-Данченко','20'], [10000010,'Троллейная','7'], [10000011,'yuttyutu 1',''], [10000012,'Трикотажная','60/2'], [10000013,'карла маркса','53а'], [10000014,'королева','40'], [10000015,'Советская','64'], [10000016,'Зорге','94'], [10000017,'Зорге','94'], [10000018,'Обская','50'], [10000019,'Обская','50'], [10000020,'Депутатская','58'], [10000021,'Одоевского','1/9'], [10000022,'Свердлова','7'], [10000023,'пл. Карла Маркса','3'], [10000024,'Трикотажная','60/2'], [10000025,'советская','64'], [10000026,'ул. Советская','64'], [10000027,'большевистская','114'], [10000028,'Советская','64'], [10000029,'Державина','92'], [10000030,'Гоголя','44'], [10000031,'гоголя','12'], [10000032,'Лежена','5а'], [10000033,'титова','242/2'], [10000034,'Федосеева','34'], [10000035,'Линейная','47'], [10000036,'линейная','47'], [10000037,'Романова','60'], [10000038,'красный проспект','181'], [10000039,'Фрунзе','59/2'], [10000040,'Кирова','25'], [10000041,'Cоветская','20'], [10000042,'ул. Семьи Шамшиных','90/5'], [10000043,'Кирова','44/1'], [10000044,'Кирова','44/1'], [10000045,'кропоткина','125'], [10000046,'Ленина','53'], [10000047,'Кирова','44/1'], [10000048,'Лазарева','34'], [10000049,'Панфиловцев','5'], [10000050,'костанаева','38'], [10000051,'чкалова','70/1'], [10000052,'лазарева','35'], [10000053,'Красный проспект','220'], [10000054,'пмшпс',''], [10000055,'Зорге','49'], [10000056,'Микрорайон Горский','8'], [10000057,'пр Карла Маркса','53а'], [10000058,'кирова','44/1'], [10000059,'апро',''], [10000060,'Петухова','146'], [10000061,'Титова','240/1'], [10000062,'Зорге','221'], [10000063,'Северная','29'], [10000064,'Планировочная','42'], [10000065,'Нижегородская','23'], [10000066,'По',''], [10000067,'площадь карла маркса','3'], [10000068,'дуси ковальчук','187'], [10000069,'Степная','45'], [10000070,'красный проспект','220 к 10'], [10000071,'овражная','6'], [10000072,'Кропоткина','136'], [10000073,'Советская','12'], [10000074,'Советская','12'], [10000075,'Советчкая','21'], [10000076,'ddds','ауцац'], [10000077,'fwewfw','fewf'], [10000078,'ljjlj','wrewr'], [10000079,'Богдана Хмельницкого','20'], [10000080,'Челюскинцев','30'], [10000081,'Красный проспект','220'], [10000082,'сибиряков гвардейцев','44/7'], [10000083,'Станиславского','44'], [10000084,'Московская','297'], [10000085,'Толстого','56'], [10000086,'сибирская','46'], [10000087,'Плахотного','82'], [10000088,'Гурьевская','37'], [10000089,'Татьяны Снежиной','46'], [10000090,'Немировича-Данченко','120/3'], [10000091,'пл. Карла Маркса','3'], [10000092,'Лазарева','35'], [10000093,'Железнодорожная','2'], [10000094,'Лазарева','35'], [10000095,'Лазарева','35'], [10000096,'Дмитрия Шамшурина','1'], [10000097,'Кубовая','92/2'], [10000098,'Нарымская','19'], [10000099,'Куприна','8/1'], [10000100,'выборная','99/4'], [10000101,'Проспект дзержинского','1/1'], [10000102,'красный проспект','220'], [10000103,'Советская','64'], [10000104,'Ельцовская','2'], [10000105,'Молодости','26'], [10000106,'Советская','64'], [10000107,'Советская','64'], [10000108,'Советская','64'], [10000109,'1905 года','87'], [10000110,'советская','64'], [10000111,'Семьи шамшиных','22/1'], [10000112,'Красный проспект','173/1'], [10000113,'Кирова','44/1'], [10000114,'Красный проспект','173/1'], [10000115,'Красный проспект','220 к 10'], [10000116,'ватутина','7'], [10000117,'Маркса','3'], [10000118,'Кирова','27/3'], [10000119,'Телевизионная','5'], [10000120,'Советская','64'], [10000121,'Революции','6'], [10000122,'Трудовая','7'], [10000123,'Фрунзе','71'], [10000124,'Советская','64'], [10000125,'Дуси Ковальчук','266/2'], [10000126,'гоголя','7'], [10000127,'Кирова','44/1'], [10000128,'Покатный переулок','9'], [10000129,'Советская','64'], [10000130,'Дуси Ковальчук','69'], [10000131,'горский','10'], [10000132,'Вокзальная магистраль','4/1'], [10000133,'микрорайон горский','41'], [10000134,'Республиканская','8'], [10000135,'Советская','64'], [10000136,'101','1'], [10000137,'1','1'], [10000138,'Мояковского','2'], [10000139,'Мояковского','2'], [10000140,'Советская','64'], [10000141,'микрорайон горский','41'], [10000142,'Советская','64'], [10000143,'Одоевского','1/8'], [10000144,'Маяковского','2'], [10000145,'Маяковского','2'], [10000146,'Грибоедова','80'], [10000147,'Маяковского','2'], [10000148,'Краузе','17'], [10000149,'Горский','78'], [10000150,'Шмидта','1'], [10000151,'Щетинкина','49'], [10000152,'красный проспект','220 к 10'], [10000153,'Щетинкина','49'], [10000154,'Советская','64'], [10000155,'красный проспект','220'], [10000156,'сибиряков гвардейцев','82'], [10000157,'кирова','27/3'], [10000158,'Красина','51'], [10000159,'Чкалова','72'], [10000160,'Лебедевского','4/201'], [10000161,'кирова 44/1','4 этаж'], [10000162,'Красный Проспект','220 к 10'], 	[10000163,'Овражная','14/59'], [10000164,'Гоголя','204/1'], [10000165,'зыряновская','57/55'], [10000166,'Звездная','д.5,к6'], [10000167,'Обская 50','131'], [10000168,'Немировича-Данченко','153/15'], [10000169,'Советская','64'], [10000170,'Грибоедова','32/1'], [10000171,'tttt','32/1, 45'], [10000172,'сибирская','51 кв 12'], [10000173,'сибирская','51 121'], [10000174,'Ударная','27/3'], [10000175,'Галущака','9/63'], [10000176,'Есенина','12/2'], [10000177,'Овражная','13/75'], [10000178,'свердлова','7'], [10000179,'Гоголя','16/12'], [10000180,'Ватутина','20/1 89'], [10000181,'Шевченко 35','Кв 86'], [10000182,'лазарева','дом 35к5'], [10000183,'лазарева','д35.кв54'], [10000184,'станиславского','21/49'], [10000185,'семья шамшиных','32/40'], [10000186,'Экваторная','1-117'], [10000187,'Толстого','185/29'], [10000188,'Толстого','185'], [10000189,'Даргомыжского','3'], [10000194,'Орджоникидзе','47'], [10000196,'Вокзальная магистраль','5'], [10000197,'Красный проспект','188'], [10000198,'Фрунзе','67'], [10000199,'Орджоникидзе','47'], [10000200,'Костычева','38'], [10000201,'Овражаня','12'], [10000204,'ул. Советская','64 (1 этаж)'], [10000205,'ул. Советская','64 (11 этаж)'], [10000206,'пр. Карла Маркса','53А'], [10000207,'пл. Карла Маркса','3'], [10000208,'ул. Кирова','44/1'], [10000209,'Красный проспект','220'], [10000210,'ул. Крылова','26'], [10000211,'ТЕСТОВЫЙ АДРЕС',''], [10000212,'Северный проезд','7'], [10000213,'ул. Советская','64'], [10000214,'Гусинобродское шоссе, 31/1 . 9-18',''], [10000215,'ул. Ватутина','19'], [10000216,'ул. Северная','43'], [10000217,'ул. Советская','64'], [10000218,'ул. Сибиряков-Гвардейцев','493'], [10000219,'ул. Фасадная','15/1'], [10000220,'ул. Советская','64'], [10000221,'ул. 1905 года','21 корпус 2'], [10000222,'ул. Московская','97'], [10000223,'ул. Залесского','12'], [10000224,'пос.Восход ул.Солнечная','14/1'], [10000225,'Ленина','12'], [10000226,'Красный проспект','86'], [10000227,'ул. Советская','64'], [10000228,'ул. Кирова','46'], [10000229,'пр. Дзержинского','81А'], [10000230,'ул. Фабричная','171'], [10000231,'ул. Ватутина','51'], [10000232,'Гоголя, 38, 12 отдел, цокольный эт., ТЦ Маршал',''], [10000233,'ул. Макеева','6'], [10000234,'Богдана Хмельницкого','11'], [10000235,'ул. Петухова','71'], [10000236,'ул. Кропоткина','261/2'], [10000237,'ул. Немировича-Данченко','137'], [10000238,'Кирова','46'], [10000239,'Мира','58'], [10000240,'ул. Галущака','2А'], [10000241,'ул. Королева','40 к 40'], [10000242,'ул. Толмачевская','19 к 5'], [10000243,'ул.Северная','43'], [10000244,'ул. Романова','39'], [10000245,'ул. Большевистская','121'], [10000246,'ул. Семьи Шамшиных','20'], [10000247,'Вокзальная Магистраль','8б'], [10000248,'ул. Новая Заря','2а'], [10000249,'ул. Семьи Шамшиных','99'], [10000250,'ул. 1905 года','18'], [10000251,'ул. Большая, 256',''], [10000252,'тестовая','24'], [10000253,'тестовая вторая+','25а'], [10000254,'Кирова','25'], [10000256,'Гоголя','16/12'], [10000257,'Геодезическая','5'], [10000267,'Пр. Карла Маркса','53'], [10000268,'Чехова','111'], [10000269,'Галущака','9'], [10000270,'ул. Танковая','13'], [10000271,'танковая','13'], [10000272,'Орджоникидзе','30'], [10000273,'Красный проспект','77б'], [10000274,'Сибирская','32'], [10000276,'галущака','9'], [10000282,'Красный проспект','99, выход №7'], [10000283,'Кошурникова','55'], [10000286,'Советская','64/1'], [10000287,'Красный проспект','99'], [10000288,'проспект димитрова',' 5Б'], [10000289,'Терешковой','12'], [10000290,'Ул. Танковая','23'], [10000291,'Сибиряков-Гвардейцев','4'], [10000292,'Сибиряков-Гвардейцев','4'], [10000293,'высоцкого','41/2'], [10000294,'Танковая','23'], [10000295,'Кубовая','94'], [10000299,'Советская','64/1'], [10000300,'кропоткина','96/1'], [10000301,'Богаткова','206'], [10000310,'Котовского','21/1'], [10000311,'Котовского','21/1'], [10000312,'Котовского','21/1'], [10000313,'Котовского','10/1'], [10000314,' Красный проспект ','85а'], [10000315,'Терешковой','8'], [10000316,'ул. Рассветная','6А'], [10000317,'Коминтерна','23'], [10000320,'Большевистская','151'], [10000326,'шевченко','35'], [10000327,'маркса','26/1'], [10000328,'карла маркса','26/1'], [10000329,'Сибиряков Гвардецев','51/1'], [10000330,'ул. Сухарная','35 корпус 7/2'], [10000331,'Кошурникова','55'], [10000332,'Романова','39'], [10000333,'романова','39'], [10000334,'романова','39'], [10000335,'Молодости','26'], [10000339,'Линейная','31'], [10000342,'Депутатская','60'], [10000343,'Депутатская','60'], [10000344,'Стартовая','1'], [10000345,'проспект дзержинского','28'], [10000348,'Гоголя','42'], [10000349,'Трикотажная','61'], [10000350,'мира 2й переулок','4'], [10000352,'Блюхера','49'], [10000353,'Т','23'], [10000354,'Танковая','39'], [10000355,'Северный проезд','3 корпус 1'], [10000356,'ул. Богдана Хмельницкого,','93, строение 14'], [10000357,'ул.Кубовая','1'], [10000379,'ул. Дунайская','120'], [10000380,'ул, Восход','46'], [10000385,'Красный проспект','88'], [10000386,'Ельцовская','2'], [10000387,'Советская','5'], [10000394,'Коммунистическая','2'], [10000395,'Андриена Лежена','10/3'], [10000396,'Адриена Лежена','10/3'], [10000397,'ул. Гоголя','15'], [10000398,'Большевистская','48/1'], [10000399,'Большевистская','48/1'], [10000400,'Яснополянская','24'], [10000401,'Яснополянская','24'], [10000402,'Владимировский спуск','9/1'], [10000403,'Владимировский спуск','9/1'], [10000404,'Владимировский спуск','9/1'], [10000405,'Советская','99'], [10000406,'Земнухова','11'], [10000407,'Петухова','17 к3'], [10000408,'Земнухова','11'], [10000409,'Зорге','129'], [10000410,'Немировича-Данченко','12'], [10000411,'Немировича - Данченко','12'], [10000412,'Шевченко','15'], [10000413,'Деповская','36'], [10000414,'виталия потылицина','1'], [10000415,'Деповская','36'], [10000416,'1905 года','85'], [10000417,'Холодильная','15/1'], [10000418,'Зорге','98'], [10000419,'Красный проспект','220'], [10000420,'Станиславского','16'], [10000421,'Станиславского','16'], [10000422,'Никитина','62'], [10000423,'Сибиряков-Гвардейцев','57'], [10000424,'Высоцкого','42/1'], [10000425,'Сибиряков-Гвардейцев','4'], [10000426,'Б.Богаткова','204'], [10000428,'Димитрова','3'], [10000429,'Горский микрорайон','42'], [10000430,'Титова','13'], [10000431,'связистов','113'], [10000432,'Переездная','64'], [10000433,'Вертковская','10/2'], [10000434,'кропоткина','127'], [10000435,'Дмитрия Шмонина','2'], [10000436,'Вертковская','14/1'], [10000437,'Большевистская','48/1'], [10000438,'Макаренко','19/1'], [10000439,'бориса богаткова','166'], [10000440,'Титова','238'], [10000441,'линейная','45/2'], [10000442,'Линейная','45/2'], [10000443,'2-й переулок экскаваторный','29'], [10000444,'линейная','45/2'], [10000445,'Вертковская','10/2'], [10000446,'Вертковская','10/2'], [10000447,'Бориса Богаткова','194'], [10000449,'Военная','9/1'], [10000450,'Военная','9/1'], [10000451,'Горский микрорайон','64'], [10000452,'Гоголя','16'], [10000453,'Троллейная','1'], [10000454,'Плахотного','82'], [10000455,'Петухова','90/2'], [10000456,'Красный проспект','188'], [10000457,'каменская','26'], [10000458,'объединения','11'], [10000459,'1905 года','87'], [10000460,'телевизионная','9'], [10000461,'Рассветная','2а'], [10000462,'Сибиряков гвардейцев','12'], [10000463,'Адриена Лежена','9/3'], [10000464,'Адриена Лежена','9/3'], [10000465,'Вертковская','14/1'], [10000466,'Красный проспект','173/1'], [10000467,'Петухова','99/2'], [10000468,'высоцкого','41/2'], [10000474,'селезнева','48а'], [10000475,'макаренко','12'], [10000476,'Кошурникова','55'], [10000477,'Лазурная','22'], [10000478,'Объединения','54'], [10000479,'Алтайская','12/1'], [10000480,'Троллейная','146'], [10000481,'Кошурникова','55'], [10000482,'Вилюйская','7'], [10000483,'ул. Кошурникова','55'], [10000484,'Станиславского','26'], [10000485,'горский микрорайон','41'], [10000486,'Станиславского','26'], [10000487,'Римского -корсакого','31'], [10000488,'Римского-Корсакого','3/1'], [10000489,'Римского-Корсакого','3/1'], [10000490,'Дунаевского','3'], [10000494,'Геодезическая','19'], [10000495,'Мичурина','37'], [10000496,'Горский микрорайон','55'], [10000497,'Каунасская','51'], [10000498,'Дуси Ковальчук','414'], [10000499,'Каунасская','51'], [10000500,'дуси ковальчук','414'], [10000501,'Обская','50/2'], [10000502,'выборная','110'], [10000503,'Холодильная','17'], [10000504,'Лескова','214'], [10000505,'Дуси ковальчук','187'], [10000506,'Федосеева','3'], [10000507,'Кропоткина','136'], [10000508,'Кропоткина','136'], [10000509,'Гоголя','202'], [10000510,'Панфиловцев','5'], [10000512,'кирова','27/1'], [10000513,'Богдана Хмельницкого','8'], [10000514,'Дачная','37'], [10000515,'Дуси Ковальчук','187/1'], [10000516,'горский микрорайон','82'], [10000517,'тюленина','21/1'], [10000518,'Твардовского','22/5'], [10000519,'Галущака','9'], [10000520,'Галущака','9'], [10000521,'Жуковского ','113/3'], [10000522,'Станиславского','16'], [10000524,'Выборная','117/1'], [10000525,'Выборная','117/1'], [10000526,'Горский микрорайон','69/1'], [10000527,'Большевистская','48/1'], [10000528,'Селезнева','26/1'], [10000529,'Кропоткина','961'], [10000530,'Кропоткина','96/1'], [10000531,'Дуси Ковальчук','270/3'], [10000532,'Дуси Ковальчук','270/3'], [10000533,'магистральная','53б'], [10000534,'Лежена','18/1'], [10000535,'бориса богаткова','171/6'], [10000540,'Дуси Ковальчук','187'], [10000547,'Большевистская','110'], [10000548,'Даргомыжского','3'], [10000549,'Станиславского','16'], [10000550,'Советская','101'], [10000554,'Лежена','5а'], [10000555,'Плахотного','8'], [10000556,'Горский','69'], [10000557,'Широкая','1/1'], [10000558,'ул. Петропавловская','2'], [10000559,'селезнева','26/1'], [10000560,'Высоцкого','41/4'], [10000561,'Новогодняя','28/1'], [10000562,'Дмитрия Донского','31'], [10000563,'Станционная',' 1,корпус 1'], [10000564,'ядринцевская','68/1'], [10000565,'Ватутина','77'], [10000575,'Сибиряков-Гвардейцев','57'], [10000584,'сывмв','ывсы'], [10000592,'учительская','17/1'], [10000596,'кубовая','113/1'], [10000597,'белореченская','33'], [10000598,'Белореченская','33'], [10000599,'Горский микрорайон','82'], [10000615,'Котовского','3/2'], [10000616,'Широкая','1'], [10000623,'Галущака','9'], [10000624,'Большевистская','128'], [10000625,'ул. Сибирская','57'], [10000626,'Кирова','25'], [10000627,'кирова','25'], [10000634,'Овражная','13'], [10000636,'полтавская','47'], [10000637,'лежена','181'], [10000638,'Вилюйская','11'], [10000639,'дуси ковальчук','89'], [10000640,'ул. Федосеева','34'], [10000653,'Ельцовская','35'], [10000654,'Гурьевская','37'], [10000656,'1905 года','85/2'], [10000657,'Галущака','9'], [10000660,'весенняя','16'], [10000661,'Выборная','99'], [10000665,'урманова','3'], [10000673,'Test','1'], [10000674,'урманова','10'], [10000675,'Адриена Лежена','30/1'], [10000678,'Горский микрорайон','82'], [10000679,'Кропоткина','130'], [10000682,'Кропоткина','130/1'], [10000686,'Беловежская','4/1'], [10000687,'Галущака','9'], [10000690,'Красный проспект','153Б'], [10000727,'Республиканская','3а'], [10000730,'9 гвардейской дивизии','17'], [10000731,'Сибирская','44'], [10000732,'галущака','9'], [10000733,'Холодильная','13'], [10000734,'Урманова','6'], [10000735,'Виктора Уса','13'], [10000736,'Ольги Жилиной','58'], [10000737,'1-ая Грузинская','28/1'], [10000738,'ул. Восход','26/1'], [10000740,'Пер. 3-й Крашенинникова','7'], [10000741,'Державина','77/2'], [10000749,'Урманова','10'], [10000750,'урманова','6']	];
//  Создаем прямоугольник с помощью вспомогательного класса.
    var myPolygon = new ymaps.Polygon([[  
		[54.93410833795803,82.93701160839268], [54.93074757042416,82.93666828563924], [54.92649678398898,82.92276371410652], [54.92985790827279,82.91675556591233], [54.93302106168151,82.87624348095143], [54.943200765316625,82.87658680370564], [54.945720583467825,82.84216869762639], [54.94932710596011,82.83538807323639], [54.95979539509517,82.84167867086184], [54.96303542167545,82.83785987577693], [54.9667494649881,82.837432063439], [54.96884403831455,82.83588979325546], [54.974316531212295,82.81890068135513], [54.97410284532408,82.81152997098224], [54.97476164219297,82.80176673016803], [54.97963362486446,82.78996501050253], [54.98463766522317,82.7824977406051], [54.98882058684552,82.77202639661095], [54.99146090780692,82.7775195606735], [54.994002360366125,82.83288035474017], [54.998776399665935,82.83206496320015], [55.00007158325579,82.86390814862551], [55.00079316731195,82.86657962880408], [55.00102135784093,82.86959443173654], [55.006084385472384,82.86881122670454], [55.01150129919086,82.85741183839141], [55.012335198148804,82.85724822364159], [55.01815273865472,82.86107171259236], [55.02202279452766,82.85246919772939], [55.02482059771372,82.8459363423975], [55.02638554837831,82.84227881512959], [55.02914972726712,82.83756885609947], [55.03782775793765,82.83793900094348], [55.02796950486025,82.86972317776998], [55.02343934535529,82.87910018048603], [55.01950662666435,82.88824114880872], [55.02347632832996,82.89519343457515], [55.02734702362173,82.89184603772433], [55.031325350300655,82.88503134529303], [55.03494880283828,82.87932360450979], [55.03751213510273,82.87417376320079], [55.0433096369033,82.8643435530873], [55.04500073042881,82.86063875188543], [55.046420700751064,82.8576205961914], [55.04701824364269,82.85669121076768], [55.0473755330506,82.85590532352627], [55.04974095459461,82.85489144851853], [55.04863218072155,82.85745564033647], [55.05355982859589,82.88043680717631], [55.0567132035957,82.89189520408782], [55.0659994290754,82.89374056388976], [55.06635962697229,82.88962605526088], [55.06563614924634,82.88259330322389], [55.06487879253293,82.87384930183542], [55.06986599885052,82.86906424095297], [55.07161445177159,82.87659588386677], [55.0773517933888,82.87176790763985], [55.08268210191871,82.8678626113142], [55.08596977704845,82.88103692861206], [55.08551776056022,82.8922687692856], [55.0826663197578,82.89694337358249], [55.08385223007862,82.9011029937486], [55.08229107152894,82.90811806841894], [55.078563239702284,82.90878167214211], [55.078798275722406,82.9128301158197], [55.082429724782585,82.92216420319139], [55.08207274955346,82.9307258143667], [55.085666974745926,82.9371631160025], [55.08970393670137,82.93703436996931], [55.090023922273446,82.94218421127785], [55.09474956352831,82.95729041245042], [55.09973740852422,82.97359824326064], [55.09774409686098,82.98372626450073], [55.09597218045392,82.98282504227204], [55.09656282802139,82.97986388351949], [55.08787405335297,82.97575696347081], [55.086048501037986,82.97264274410277], [55.08304590093322,82.96864598133037], [55.08159338354357,82.97268002368897], [55.07723551340808,82.98379509784648], [55.07514258142434,82.98534005023936], [55.07184291235674,82.98259346820791], [55.066067912705506,82.96952659326239], [55.057346261742026,82.97967651556117], [55.05941549564048,82.98401096532915], [55.057296992942646,82.98671463201607], [55.05444532279033,82.99200345257307], [55.05277605182125,82.99815058001485], [55.04725693678558,82.99900888689963], [55.03542768877383,83.00330042132344], [55.028772194765,83.00510286578148], [55.02359493178413,83.00072550066915], [55.02112933236251,82.99660562762227], [55.014224843580514,82.9952323366066], [55.0076151427879,82.99231409319836], [55.00432221561625,83.00119756945567], [55.00112769347454,83.01402925738296], [54.9954780674765,83.01977991351087], [54.99192505499645,83.00952314623794], [54.985212947064106,83.01883577593766], [54.98247966099166,83.01396488436659], [54.98413939875288,83.0060899186989], [54.98321390292969,82.99995302447283], [54.98452193077554,82.99488901385276], [54.9821468992862,82.9896513449848], [54.9824373261832,82.98647361264032], [54.97241572451053,82.9594369457702], [54.95886035103677,82.97986464962763], [54.95451375780096,82.97377067074584], [54.94977148109927,82.96896415219112], [54.943447571164874,82.97960715756221], [54.938605152187144,82.97231154904173], [54.93771566461346,82.95136886105345], [54.93885222856137,82.9386659191589], [54.93410833795803,82.93701160839268],  
	]],

     {
        balloonContent: 'Доставка за 300р.'
    }, {
        // Опции.
        // Цвет и прозрачность заливки.
//        fillColor: '#7df9ff33',
        fillColor: '#06ff00',
        // Дополнительная прозрачность заливки..
        // Итоговая прозрачность будет не #33(0.2), а 0.1(0.2*0.5).
        fillOpacity: 0.3,
        // Цвет обводки.
        strokeColor: '#0000FF',
        // Прозрачность обводки.
        strokeOpacity: 0.7,
        // Ширина линии.
        strokeWidth: 1,
		zindex: 100,
        // Радиус скругления углов.
        // Данная опция принимается только прямоугольником.
        borderRadius: 12
    });

//  Создаем прямоугольник с помощью вспомогательного класса.
    var myPolygonOut = new ymaps.Polygon([[
			[54.84306884274331,83.05634952253406], [54.84153407807578,83.03581935940885], [54.840023624994465,83.01431045765584], [54.84188161943492,83.0024145930127], [54.85149021194751,82.98104275158164], [54.84786249541523,82.97388661792985], [54.84728673552813,82.96816278389201], [54.84848467826445,82.96495754411919], [54.842550333005555,82.9493926852058], [54.839256191829406,82.9354237406561], [54.84408585539303,82.9326986162969], [54.86303976816581,82.94875968387807], [54.865524407200446,82.93311972311216], [54.873453801694744,82.93533254554944], [54.87534387869868,82.94303853204923], [54.87584809042809,82.98336018017011], [54.89418100688593,82.98215855053138], [54.90314648700607,82.9654215662784], [54.90189144048005,82.92443741253086], [54.91451739572074,82.92317140987582], [54.91450039894168,82.86056865146823], [54.8978663710481,82.84809101513093], [54.91343626358206,82.7978185184982], [54.932876378344794,82.80929837308183], [54.94361197666532,82.8248981007124], [54.97080252617654,82.7672198780562], [54.96717324929047,82.74147067151331], [54.96544490641759,82.69031558118057], [54.97685676005682,82.68945727429588], [54.97681356285991,82.66422305188394], [54.98146624994629,82.661476469853], [54.999454834395074,82.66902957043945], [54.99849268717271,82.6856378086596], [55.00798979235196,82.70636591992664], [55.02112167714921,82.71421942792192], [55.02951642111642,82.7316859730266], [55.05416038050272,82.75571856580022], [55.06834838983901,82.75400195203096], [55.10193563248594,82.75594198982434], [55.10134494886453,82.77996939632749], [55.08618392563652,82.80022025253756], [55.099376210329076,82.80502677109293], [55.10497834407678,82.8078913703208], [55.125932131231764,82.82219827320621], [55.13999216067705,82.83496022369906], [55.157729145431965,82.8482103362326], [55.14872649090869,82.89373278763335], [55.15292096127003,82.91909575607814], [55.185085289983576,82.92553305771374], [55.198572695421184,82.93481077262086], [55.200275202746575,82.977047471903], [55.19661073754022,82.99697619273294], [55.16096992148841,83.01301053037461], [55.15343093616846,83.01186927347642], [55.15532797328772,82.99836839743762], [55.121824595394756,83.0118183575805], [55.12873986584527,83.04294943954946], [55.11831223996677,83.05166125443023], [55.11208640209515,83.04869703630452], [55.107631065813294,83.05517419391127], [55.090305466914685,83.07316660174331], [55.07312118604665,83.05668710955578], [55.06873776150439,83.05479883440933], [55.06361494643057,83.05067896136241], [55.06174298432482,83.03411363848652], [55.041145596740584,83.03763269671407], [55.03956832468436,83.02647470721203], [55.02458112890747,83.03042291888201], [55.01256104559947,83.04689841732782], [55.010551038002156,83.07445006832882], [54.99472640210213,83.06904273495473], [55.000968199835796,83.09187369808949], [54.990753841176314,83.09805350765981], [54.991642149959965,83.12002616390983], [54.978895495404394,83.14067917332449], [54.97271813717107,83.1568421648482], [54.96160142552715,83.165452055786], [54.96770025963661,83.18684535488882], [54.971008549739366,83.20096450314315], [54.96814467272026,83.21512656674174], [54.9468072727124,83.2346959637144], [54.93961815561643,83.21115689739982], [54.92722563305669,83.20453720555102], [54.92570564791606,83.19568591580182], [54.92296211409536,83.18536477551257], [54.92872084670478,83.17487197384636], [54.92844899382551,83.1656022594909], [54.92282616834258,83.15959411129752], [54.914730385051655,83.16148238644404], [54.90102562582681,83.13332992062364], [54.891867963569446,83.13882308468614], [54.88245460123149,83.13813643917834], [54.877877003962645,83.12749343380726], [54.873608233227586,83.1180520580748], [54.86815096936067,83.1154771374206], [54.85768275987847,83.12417240956728], [54.84364563331617,83.12771784040547], [54.837756636622146,83.12210576018725], [54.832483204132096,83.11414987876947], [54.82443402477649,83.1020741243049], [54.82716534060976,83.08684900697733], [54.837693239843766,83.06844015786137], [54.84385977442994,83.0637642189017], [54.84306884274331,83.05634952253406], 
		]],
     {
        balloonContent: 'Доставка за 600р.'
    }, {
//		Цвет и прозрачность заливки.
//      fillColor: '#7df9ff33',
        fillColor: '#ff8a00',
        // Дополнительная прозрачность заливки..
        // Итоговая прозрачность будет не #33(0.2), а 0.1(0.2*0.5).
        fillOpacity: 0.3,
        // Цвет обводки.
        strokeColor: '#0000FF',
        // Прозрачность обводки.
        strokeOpacity: 0.7,
        // Ширина линии.
        strokeWidth: 1,
        // Радиус скругления углов.
        // Данная опция принимается только прямоугольником.
        borderRadius: 12
    });

//добавляем полигон на карту иначе не будет искать 
    myMap.geoObjects.add(myPolygonOut);
    myMap.geoObjects.add(myPolygon);


    $(document).on('keyup','.address_point',function(){
        //Подготавливаем локальные переменные для выбора адреса
        var maybeArdessPlace =  $(this).closest('.wrapper_adress').find('.maybeArdess');//$(this).next();
        var address = $(this).val();
        var id = $(this).attr('id').substring(1);
        //Очищаем поле
        $(maybeArdessPlace).html('');
        if(address != ''){
            getPointByName(address, maybeArdessPlace, id);
        }
    });


//добавляем кнопарь
//Кнопочка включения выключения добавляем событие
//флажок выключение включения рисования
	 var flagInline = false;
	 $('#starteditinline').click(function(){
	 if(flagInline==false){
			myPolygon.editor.startEditing();
			flagInline=true;
		}
		else{
			myPolygon.editor.stopEditing();
    		flagInline=false;
		}
})

//добавляем кнопарь
//Кнопочка включения выключения добавляем событие
//флажок выключение включения рисования
	var flagOutline = false;
	$('#starteditoutline').click(function(){
		 if(flagOutline==false){
				myPolygonOut.editor.startEditing();
			 	flagOutline=true;
		 }
 		 else{
	 			myPolygonOut.editor.stopEditing();
    			flagOutline=false;
	 	 }
	})

//Вывод массива координат доставки за 600р
	$('#sbmt600').click(function(){
	    console.table(myPolygonOut.geometry);
		var arr = myPolygonOut.geometry.getCoordinates();
		var str;
		for(i=0; i<arr[0].length; i++){
//			console.log('['+arr[0][i][0]+','+arr[0][i][1]+'],');
		    str=str+'['+arr[0][i][0]+','+arr[0][i][1]+'], ';
		}
		console.log(str);
	});

//Вывод массива координат доставки за 300р
	$('#sbmt300').click(function(){
	    console.table(myPolygon.geometry);
		var str='';
		var arr = myPolygon.geometry.getCoordinates();
		for(i=0; i<arr[0].length; i++){
//		    console.log('['+arr[0][i][0]+','+arr[0][i][1]+'],');
		    str=str+'['+arr[0][i][0]+','+arr[0][i][1]+'], ';
		}
		console.log(str);
	});

//Вывод проверки улицы
	$('#sbmt').click(function(){
	    var city_id = $('.address_point').val();
		checkDeliveryPrice("Россия, "+city_id);
	});

//Вывод проверки улицы массивом
	$('#sbmtCheck').click(function(){
			if (!confirm("Вы уверены?")) 
			           return false;
	        var i,l;
			for(i=0; i<myAddress.length; i++)
			{
				checkDeliveryPriceMany(myAddress[i][0], myAddress[i][1]+' '+myAddress[i][2]);
				console.log(myAddress[i][0]+' '+myAddress[i][1]+' '+myAddress[i][2]);

			}
	});

//Проверка адресов и записи в базе
	function pushDelivery(id, value)
	{
		$.ajax({     
            url: "http://basic/addon?id="+id+"&value="+value,
            type: "GET",
            data: {},
			async: false,
            dataType: "JSONP",
            success: function(response){
			console.log(response);
		  }

		});
	
	}

//Проверка адресов и записи в базе множества для базы
	function checkDeliveryPriceMany(id,city_id)
	{
		$.ajax({     
            url: "https://geocode-maps.yandex.ru/1.x/?format=json&geocode=Россия, Новосибирск, "+city_id+"&results=3",
            type: "GET",
            data: {},
            dataType: "JSON",
			async: false,
            success: function(response){

				var arr = [];
				arr = explode(' ',response.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos);

			if(myPolygon.geometry.contains([arr[1],arr[0]])){
				console.log('1006');
				pushDelivery(id,'1006');
			}
			else{
				console.log('1007');
				pushDelivery(id,'1007');
			}
		
		  }

		});
	}      

	function checkDeliveryPrice(city_id){
		$.ajax({     
            url: "https://geocode-maps.yandex.ru/1.x/?format=json&geocode="+city_id+"&results=3",
            type: "GET",
            data: {},
            dataType: "JSON",
            success: function(response){
				var arr = [];
				arr = explode(' ',response.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos);

				if(myPolygon.geometry.contains([arr[1],arr[0]]))
					alert(city_id+', Доставка: 300р.');		
				else if(myPolygonOut.geometry.contains([arr[1],arr[0]]))
					alert(city_id+', Доставка: 600р.');
				else
					alert(city_id+', Доставка: Нет доставки!');	

				console.log(response.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos);
				console.log(arr[1]+' '+arr[0]);
				console.log(myPolygon.geometry.contains([arr[1],arr[0]]));
		  }
		});
	}      

    myMap.events.add('click', function (e) {
        myMap.balloon.close();
        var coords = e.get('coords');
        if (!myMap.balloon.isOpen()) 
		{

            myMap.balloon.open(coords,{
		                contentBody:'<p>Нет доставки</p>'});

		}
	});

//Клик по балону выдает координаты в консоль
	myPolygon.events.add('click', function (e) {
            var coords = e.get('coords');
//			console.log(coords); 
	});

//Клик по балону выдает координаты в консоль
	myPolygonOut.events.add('click', function (e) {
            var coords = e.get('coords');
//			console.log(coords); 
	});
	

function getPointByName(name,place,id){
	if(!name)
		return false;
	yaPoints = [];
	
	var returnArray = [];
	var addressObj = {};

	if(name != ''){
        $.ajax({
            url: "https://geocode-maps.yandex.ru/1.x/?format=json&geocode=Россия, Новосибирск,  "+name+"&results=3",
            type: "GET",
            data: {},
            dataType: "JSON",
            success: function(response){
                if(response.response.GeoObjectCollection.featureMember.length > 0){
                    $(place).html('');
                    yaPoints = [];
                    for (var i = 0; i <= response.response.GeoObjectCollection.featureMember.length; i++) {
                        
                        if(isset(response.response.GeoObjectCollection.featureMember[i])){
		                    
		                    if(isset(response.response.GeoObjectCollection.featureMember[i].GeoObject)){
		                        
		                        if(isset(response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty)){
			                        
			                        if(isset(response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData)){
				                        
				                        if( isset(response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.kind) ){

				                        	if((response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.kind == 'street' || response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.kind == 'house') && response.response.GeoObjectCollection.featureMember[i].GeoObject.name != '50Н-2138'){
												//Сюда записываем все данные для объекта адрес
												var addressObj = {};
												var geoObject = response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty;
												
				                        		var addressDetail = geoObject.GeocoderMetaData.AddressDetails.Country;

												addressObj = {
													'country': addressDetail.CountryName,
													'AdministrativeAreaName': addressDetail.AdministrativeArea.AdministrativeAreaName,
													'position': response.response.GeoObjectCollection.featureMember[i].GeoObject.Point.pos,
													'city': '',
													'street': '', 
													'house': '',
													'cityDistrict':''
												}
												
												
												if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea)){
													//Добавляем город и улицу, если они есть	
													if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality) )
                                                    {
														if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.LocalityName) ){
															addressObj.city = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.LocalityName;
														}
                                                        if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality))
                                                        {
                                                            if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality))
                                                            {
                                                                  addressObj.street = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality.Thoroughfare.ThoroughfareName;
                                                            }
                                                            else if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.ThoroughfareName))
                                                            {
                                                                addressObj.street = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.ThoroughfareName;
                                                            }
                                                        }
                                                        
                                                        else if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.ThoroughfareName))
                                                        {
                                                            addressObj.street = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.ThoroughfareName;
                                                        }
                                                          
                                                        
                                                        
                                                        /*if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.ThoroughfareName))
                                                        {
                                                            addressObj.street = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.ThoroughfareName;
                                                        }
                                                        
														if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.ThoroughfareName) )
                                                        {
															addressObj.street = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.ThoroughfareName;
														} */   
                                                        
													}

													//Добавляем дом, если он есть
													if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare))
                                                    {
														if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.Premise) )
                                                        {
															if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.Premise.PremiseNumber) )
                                                            {
																addressObj.house = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.Premise.PremiseNumber;
															}
														}	
													}
                                                    else if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality))
                                                    {
                                                        if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality))
                                                        {
                                                            if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality.Thoroughfare))
                                                            {
                                                                if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality.Thoroughfare.Premise))
                                                                    if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality.Thoroughfare.Premise.PremiseNumber))
                                                                        addressObj.house = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocality.Thoroughfare.Premise.PremiseNumber;
                                                            }
                                                        }
                                                        else if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.Premise))
                                                        {
                                                            if(isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.Premise.PremiseNumber))
                                                                addressObj.house = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.Thoroughfare.Premise.PremiseNumber;
                                                        }
                                                    }
													
													//Добавляем район города
													if(addressObj.house != '')
														addressObj.cityDistrict = getCityDistrict(addressObj.position.replace(/ /g,","));

												/*	if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare) ){
														if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.Premise) ){
															if( isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.Thoroughfare.Premise.PremiseNumber) ){
																if( !isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality) ){
																	if( !isset(addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocalityName) ){
																		
																	}
																	else{
																		addressObj.cityDistrict = addressDetail.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocalityName;	
																	}
																}
																
															}
														} 
													}    */
												}
					                            
					                            //Совставляем адрес
					                            var adressPoint = addressObj.street;
					                            //Если есть дом то, добавляем дом
					                            if(addressObj.house != '')
					                            	adressPoint = adressPoint+' '+addressObj.house;
//					                            	adressPoint = adressPoint+', '+addressObj.house;
					                            //Если город отличается от города юзера то, добавляем в начало еще и город
					                            if(addressObj.city != userCity)
					                            	adressPoint = addressObj.city+' '+adressPoint;
					                            yaPoints.push(addressObj);
					                            var indx = yaPoints.length-1;
					                            $(place).append("<span class=''><a href='#' class='adr_str' onclick=\" $(this).closest('.wrapper_adress').find('input.address_point').val('"+adressPoint+"'); $('.maybeArdess').empty(); set_array('"+indx+"', '"+id+"') \">"+adressPoint+"</a></span></br>");
					                             console.log(addressObj.position);
					                        }
				                        }
				                    }
				                }
				            }
				        }                
                    }
                }    
            }
        });
    }

}

function _getCityDistrict(position){
	if(!position)
		return false;
	
	return $.ajax({
        url: "https://geocode-maps.yandex.ru/1.x/?format=json&geocode="+position,
        type: "GET",
        data: {},
        dataType: "JSON",
        async:false,
        success: function(response){
                
        }
    });
}

function getCityDistrict(position){
	if(!position)
		return false;

	var result = _getCityDistrict(position);
	console.log(result);
	if(!result.responseText)
		return false;
	var response = $.parseJSON(result.responseText);

	
	if(response.response.GeoObjectCollection.featureMember.length > 0){
		for (var i=0; i < response.response.GeoObjectCollection.featureMember.length; i++) { 
			if(response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.SubAdministrativeArea != undefined ){
				if(response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality != undefined){	
					if( response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocalityName != undefined ){
						return response.response.GeoObjectCollection.featureMember[i].GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.SubAdministrativeArea.Locality.DependentLocality.DependentLocalityName;
					}
				}
			}		
		}
    }
}




}


